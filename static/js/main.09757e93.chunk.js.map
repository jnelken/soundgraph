{"version":3,"sources":["Iframe.js","database.js","App.js","serviceWorker.js","index.js"],"names":["Iframe","trackId","src","from","title","width","height","scrolling","frameBorder","allow","database","Line","to","tail","color","Track","key","id","style","margin","zIndex","Node","display","alignItems","Object","entries","map","leafTrackId","Number","App","className","info","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAEaA,G,MAAS,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QACjBC,GADqC,EAAXC,KACvB,mFAA+EF,EAA/E,0IACT,OACE,6BACE,4BACEG,MAAM,OACNC,MAAM,OACNC,OAAO,MACPC,UAAU,KACVC,YAAY,KACZC,MAAM,WACNP,IAAKA,O,OCDAQ,GAAQ,mBAZF,UAaH,CAAEP,KAAM,OADH,cAXP,UAaH,CAAEA,KAdM,YAYE,cARJ,UAWH,CAAEA,KAfG,YAYE,cAVF,UAcH,CAAEA,KAZD,YAQI,cAPN,UAYH,CAAEA,KAbG,YAQI,cANJ,UAYH,CAAEA,KAjBF,YAWO,cATD,UAgBH,CAAEA,KAbF,YAMI,cALW,UAcH,CAAEA,KAAM,OAThB,cAJgB,UAcH,CAAEA,KAfJ,YAKX,cAHL,UAeH,CAAEA,KAAM,OAZA,cAFH,UAeH,CAAEA,KAhBD,YAGK,GCPfQ,EAAO,SAAC,GAAD,IAAGR,EAAH,EAAGA,KAAMF,EAAT,EAASA,QAAT,OACX,gCACEE,KAAI,iBAAYA,GAChBS,GAAE,iBAAYX,GACdY,KAAK,OACLC,MAAM,UAIJC,EAAQ,SAAC,GAAuB,IAArBd,EAAoB,EAApBA,QAASE,EAAW,EAAXA,KACxB,OACE,yBACEa,IAAKf,EACLgB,GAAE,gBAAWhB,GACbiB,MAAO,CAAEC,OAAQ,GAAIC,OAAQ,MAE7B,kBAAC,EAAD,CAAQnB,QAASA,EAASE,KAAMA,MAKhCkB,EAAO,SAAPA,EAAQ,GAAiB,IAAfpB,EAAc,EAAdA,QACd,OACE,yBAAKiB,MAAO,CAAEI,QAAS,OAAQC,WAAY,WACzC,kBAAC,EAAD,CAAOtB,QAASA,IAChB,yBAAKiB,MAAO,IACTM,OAAOC,QAAQf,GAAUgB,KAAI,YAA0B,IAAD,mBAAvBC,EAAuB,KAGrD,OAHqD,KACjCxB,OAASyB,OAAO3B,GAGlC,kBAACoB,EAAD,CAAML,IAAKW,EAAa1B,QAAS0B,IAC/B,WA2BCE,MApBf,WACE,OACE,yBAAKC,UAAU,OACb,0CACA,4BAAQA,UAAU,eAIfN,OAAOC,QAAQf,GAAUgB,KAAI,mCAAEzB,EAAF,KAAW8B,EAAX,YAC5BA,EAAK5B,KACH,kBAAC,EAAD,CAAMa,IAAKf,EAASA,QAASA,EAASE,KAAM4B,EAAK5B,OAEjD,kBAAC,EAAD,CAAMa,IAAKf,EAASA,QAASA,UC3CrB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09757e93.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Iframe = ({ trackId, from }) => {\n  const src = `https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${trackId}&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true`;\n  return (\n    <div>\n      <iframe\n        title=\"asdf\"\n        width=\"100%\"\n        height=\"300\"\n        scrolling=\"no\"\n        frameBorder=\"no\"\n        allow=\"autoplay\"\n        src={src}\n      ></iframe>\n      {/* <div\n        style={{\n          fontSize: \"10px\",\n          color: \"#cccccc\",\n          lineBreak: \"anywhere\",\n          wordBreak: \"normal\",\n          overflow: \"hidden\",\n          whiteSpace: \"nowrap\",\n          textOverflow: \"ellipsis\",\n          fontFamily:\n            \"Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif\",\n          fontWeight: 100,\n        }}\n      >\n        <a\n          href=\"https://soundcloud.com/nelkn\"\n          title=\"/\\/elkn\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ color: \"#cccccc\", textDecoration: \"none\" }}\n        >\n          /\\/elkn\n        </a>{\" \"}\n        Â·{\" \"}\n        <a\n          href=\"https://soundcloud.com/nelkn/i-will-be-alright\"\n          title=\"I Will Be Alright\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ color: \"#cccccc\", textDecoration: \"none\" }}\n        >\n          I Will Be Alright\n        </a>\n      </div> */}\n    </div>\n  );\n};\n","const NLE_CHOPPA = 775832647;\nconst FAYGO = 754563502;\nconst PARTY_GIRL = 689218417;\nconst JUICE_WORLD = 805856467;\nconst SIX_NINE = 815074948;\nconst FUTURE = 819894787;\nconst LIL_BABY = 805851367;\nconst FIRST_DESPAIR_THEN_HOPE = 826727410;\nconst FIRST_DESPAIR_THEN_HOPE_BASS = 826748818;\nconst BEATBOX = 826761601;\nconst BEATBOX_2 = 826765663;\n\nexport const database = {\n  [NLE_CHOPPA]: { from: null },\n  [FAYGO]: { from: NLE_CHOPPA },\n  [SIX_NINE]: { from: NLE_CHOPPA },\n  [PARTY_GIRL]: { from: SIX_NINE },\n  [FUTURE]: { from: SIX_NINE },\n  [LIL_BABY]: { from: FAYGO },\n  [JUICE_WORLD]: { from: LIL_BABY },\n\n  [FIRST_DESPAIR_THEN_HOPE]: { from: null },\n  [FIRST_DESPAIR_THEN_HOPE_BASS]: { from: FIRST_DESPAIR_THEN_HOPE },\n\n  [BEATBOX]: { from: null },\n  [BEATBOX_2]: { from: BEATBOX },\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Iframe } from \"./Iframe\";\nimport { database } from \"./database\";\n\nconst Line = ({ from, trackId }) => (\n  <connection\n    from={`#track-${from}`}\n    to={`#track-${trackId}`}\n    tail=\"true\"\n    color=\"#fff\"\n  ></connection>\n);\n\nconst Track = ({ trackId, from }) => {\n  return (\n    <div\n      key={trackId}\n      id={`track-${trackId}`}\n      style={{ margin: 60, zIndex: 1000 }}\n    >\n      <Iframe trackId={trackId} from={from} />\n    </div>\n  );\n};\n\nconst Node = ({ trackId }) => {\n  return (\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      <Track trackId={trackId} />\n      <div style={{}}>\n        {Object.entries(database).map(([leafTrackId, info]) => {\n          const isLeaf = info.from === Number(trackId);\n\n          return isLeaf ? (\n            <Node key={leafTrackId} trackId={leafTrackId} />\n          ) : null;\n        })}\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>SoundGraph</h1>\n      <header className=\"App-content\">\n        {/* {Object.entries(database).map(([trackId, info]) => (\n          <Track trackId={trackId} />\n        ))} */}\n        {Object.entries(database).map(([trackId, info]) =>\n          info.from ? (\n            <Line key={trackId} trackId={trackId} from={info.from} />\n          ) : (\n            <Node key={trackId} trackId={trackId} />\n          )\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}